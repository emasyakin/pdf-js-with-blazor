@page "/pdfjs/{filename}"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>PDF JS</PageTitle>
<div @ref="canvasWrapper" id="pdf-container">
    <canvas id="pdf-canvas"></canvas>
</div>

@code {

    private const string PdfFilesDirectoryName = "pdf-files";

    private string? AbsolutePathToFile;

    [Parameter]
    public string? filename { get; set; }

    private ElementReference canvasWrapper;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnNavigationManagerOnLocationChanged;

        if (string.IsNullOrEmpty(NavigationManager?.BaseUri)) return;
        SetFilePath();
    }

    private async void OnNavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (string.IsNullOrEmpty(NavigationManager?.BaseUri)) return;
        SetFilePath();

        if (NavigationManager.Uri.Contains("pdfjs", StringComparison.OrdinalIgnoreCase))
        {
            await JS.InvokeVoidAsync("pdfJSViewerFunctions.init", canvasWrapper, AbsolutePathToFile);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync(
                "pdfJSViewerFunctions.init", canvasWrapper, AbsolutePathToFile);
        }
    }

    private void SetFilePath()
    {
        var uriPart = new Uri(NavigationManager.BaseUri).GetLeftPart(UriPartial.Authority);
        AbsolutePathToFile = $"{uriPart}/{PdfFilesDirectoryName}/{filename}";
    }

    void IDisposable.Dispose()
    {
        if (NavigationManager != null)
        {
            NavigationManager.LocationChanged -= OnNavigationManagerOnLocationChanged;
        }
    }
}
